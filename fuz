#!/usr/bin/env bash
#
# Fuz: Terminal-based, file fuzzy finder for ultra-fast text search. Integrated with vim
# Project homepage: https://github.com/Magnushhoie/fuz

# 1. section: global constants
set -o nounset
set -o pipefail
if [[ ${TRACE-0} == "1" ]]; then
  set -o xtrace
fi

# Script parameters
FUZ_SCRIPT_DIR="$(
  cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1 >/dev/null
  pwd -P
)"
FUZ_SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
declare FUZ_SCRIPT_DIR
declare FUZ_SCRIPT_PATH
declare FUZ_SCRIPTS_FILE="$FUZ_SCRIPT_DIR/fuz_scripts.sh"
declare FUZ_SCRIPTS_FILE="$FUZ_SCRIPT_DIR/fuz_scripts.sh"

# FZF GUI parameters
export FZF_CTRL_T_OPTS="--preview 'bat --color=always --line-range :500 {}'"
export FZF_DEFAULT_OPTS="--reverse --inline-info --ansi"

# 2. section: functions
function usage() {
  cat <<EOF #
USAGE:
  fuz [options] <FILENAME and/or SEARCH-TERMS>

Fuz interactively fuzzy searches a directory and
opens selected files at search result.

Use --edit to list files and edit in vim,
or --open for system default app

Skips large (1M+) or binary files, and hidden directories including .gitignore
Default searches 5 directories down, follows symlinks and shows up to 50K lines per file.

Project homepage: https://github.com/Magnushhoie/fuz

KEY BINDINGS:
  CTRL+O             Open in vim
  CTRL+L             View with less
  CTRL+J             MOVE down
  CTRL+K             MOVE up

OPTIONS:
  --setup            Set fuz default search directory in .zsh/.bashrc
  -p, --path         Directory to search
  -o, --open         Open search directory or file with system default application
  -e, --edit         Open file with vim editor (instead of 'less'), enables --names option
  -n, --names        Only show filenames
  -c, --create       Create new file in search directory: --create <FILENAME>
  -d, --max-depth    Max search depth (5)
  -m, --max-lines    Max lines read per file (50000)
  -s, --max-size     Max file-size to search (1M)
  -f, --fuzzy-search Enable fuzzy instead of exact search
  --sorttime         Sort files by date modified, preserve line order (single threaded, slow)
  --vimsearch        Search lines and open in vim
  --dir              Print and open search directory
  -h, --help         Print this help and exit

EXAMPLES:
- Search text from default path
    fuz

- Search specific path
    fuz --path DIRECTORY

- Search filenames to edit with vim:
    fuz --edit

- Open matches with system default text editor
    fuz --open

- Chronologically sort results
    fuz --sorttime

EOF
  exit 0
}

msg() {
  echo >&2 -e "$*"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  edit='0'            # e
  open_system='0'     # o
  create_file='0'     # c
  maxdepth='5'        # d
  maxlines='50000'    # m
  maxsize='1M'        # m
  names='0'           # n
  printdir='0'        # dir
  fuzzysearch='-e'    # f
  setup="0"           # setup
  dir="$(realpath .)" # p

  while :; do
    case "${1-}" in
      -h | --help) usage ;;
      -e | --edit) edit='1' names='1' rg_sort='--sortr modified' fzf_sort='--no-sort' ;;
      -o | --open) open_system='1' ;;
      -c | --create) create_file='1' ;;
      -n | --names) names='1' ;;
      -f | --fuzzy-search) fuzzysearch='' ;;
      --dir) printdir='1' ;;
      --vimsearch) edit='1' names='0' ;;
      --sorttime) rg_sort='--sortr modified' fzf_sort='--no-sort' ;;
      --setup) setup='1' ;;
      -d | --max-depth)
        maxdepth="${2-}"
        shift
        ;;
      -m | --max-lines)
        maxlines="${2-}"
        shift
        ;;
      -s | --max-size)
        maxsize="${2-}"
        shift
        ;;
      -p | --path)
        dir="$(realpath "${2-}")"
        shift
        ;;
      -?*) die "Unknown option: $1" ;;
      *) break ;;
    esac
    shift
  done

  #query="${*-}"
  query="${*-}"

  return 0
}

# all progs need to be given as parameters
function _check_required_programs() {
  for p in "${@}"; do
    hash "${p}" 2>&- \
      || {
        msg "Please install required program \"${p}\" and put in PATH. See https://github.com/Magnushhoie/fuz"
        msg """# 1. MacOS, using brew: https://brew.sh/
brew install fzf rg bat

# 2. Any OS, using conda: https://conda.io/docs/user-guide/install/
conda install -c conda-forge fzf ripgrep bat

# 3. Ubuntu
sudo apt-get install fzf ripgrep
sudo apt install bat
mkdir -p ~/.local/bin
ln -s /usr/bin/batcat ~/.local/bin/bat"""
        exit 1
      }
  done
}

#######################################
# Adds aliases fuz with new search path .bashrc/.zshrc
# Globals:
#   file: FUZ_SCRIPT_PATH
# Arguments:
#   None
#######################################
function add_aliases_zsh_bashrc() {
  # Set default search directory
  read -rp $''"Set fuz search directory below (default $FUZ_SCRIPT_DIR/notes/):"$'\n' search_directory
  FUZ_DIR=$(realpath "${search_directory:-"$FUZ_SCRIPT_DIR"/notes}")
  echo -e "New directory: $FUZ_DIR"

  # Continue?
  read -rp "fuz will now by default search the above directory. Confirm with y/n"$'\n' -n 1 -r
  if [[ $REPLY =~ ^[Nn]$ ]]; then
    exit 0
  fi

  # Add aliases to .bashrc / .zshrc
  echo -e "\nAdding aliases to .bashrc and ~/.zshrc ..."
  LINE1="alias fuz='$FUZ_SCRIPT_PATH --path \"$FUZ_DIR\"'"
  LINE2="alias fz='fuz --sorttime'"
  LINE3="alias fze='fuz --edit'"

  for LINE in "$LINE1" "$LINE2" "$LINE3"; do
    echo "$LINE"
    for FILE in "$HOME"/.bashrc "$HOME"/.zshrc; do
      if [[ -f "$FILE" ]]; then
        grep -qF -- "$LINE" "$FILE" || echo -e "$LINE" >>"$FILE"
      fi
    done
  done

  echo -e "\nPlease restart your shell for changes to take effect, then run fuz"
}

#######################################
# Open file with less or vim (-e) at selected linenumber
# Globals:
#   file: File fullpath
#   linematch: Line number
#   edit: Flag for less (0) or vim (1)
#   open_system: Flag (-o) for opening with system default program
# Arguments:
#   None
#######################################
function _open_filematch() {

  # Return file with filenumber (can copy-paste open at line with vim)
  msg "\"$file\"" "+${linematch:-0}"

  # If open system editor (-o) flag, use open (also valid for directories)
  if [[ $open_system -eq 1 ]]; then

    # Use open (MacOS) if present, else xdg-open (Linux)
    if [[ -z $(command -v xdg-open) ]]; then
      open "$file"

    else
      xdg-open "$file"
    fi

    exit 0
  fi

  # If valid file, open with vim if edit (-e) flag, else less
  if [[ -f $file ]]; then

    if [[ $edit == 1 ]]; then
      # Vim mouse-mode, start at top, softwrap, no numbering/highlight, clipboard copy-paste
      vim \
        +":set mouse=a" +":silent! normal g;" \
        +":set number nohlsearch" \
        +":set wrap linebreak nolist" \
        +":set textwidth=0 showbreak= colorcolumn= conceallevel=0 " \
        +":set clipboard^=unnamed,unnamedplus" \
        +"${linematch:-0}" +"normal zt" \
        "$file"

    else
      # Less w/ colors, highlight match, insensitive+incremental search, enable CTRL+C
      lineopen=$((${linematch:-0} >= 1 ? ${linematch:-0} - 1 : 0))
      bat "$file" --color=always --style plain \
        --highlight-line "${linematch:-0}" \
        --pager="less -R +${lineopen:-0}g --ignore-case"
    fi
  fi
  exit 0
}

function main() {

  # Check in path: fzf, ripgrep and bat
  _check_required_programs fzf rg bat realpath

  # Parse parameters
  parse_params "$@"

  # fuz --setup: Add aliases to .zshrc/.bashrc
  if [[ $setup -eq 1 ]]; then
    add_aliases_zsh_bashrc
    exit 0
  fi

  # fuz --dir: OPen search directory (and print path)
  if [[ $printdir -eq 1 ]]; then
    echo "$dir"
    open "$dir"
    exit 0
  fi

  # Main program
  cd "$dir" || exit 1

  # fuz -c [filename]: Create new file at $dir
  if [[ $create_file -eq 1 ]]; then
    if [[ -z $query ]]; then
      die "No filename provided to --create [FILENAME]"
    fi
    file="$dir/$query"

    # Ensure notes have valid note extension
    if [[ -z ${NOTE_EXT} ]]; then
      if ! [[ $file =~ .*\.(md|txt|rst|adoc|MD|TXT|RST|ADOC) ]]; then
        file="${file%.*}.${NOTE_EXT#.}"
      fi
    fi
    msg "$dir/$file"

    # Touch and open with system if --open flag, else use vim
    if [[ $edit -eq 1 ]]; then
      vim "$file"
    else
      touch "$file"
      open "$file"
    fi
    exit 0
  fi

  # fuz [filename]: If only 1 file is found (n=2 levels down), open file
  # Find files matching [filename], 2 levels deep, stop after 2nd match
  # Null terminator trick for handling filepaths with whitespaces
  # https://unix.stackexchange.com/questions/75186/how-to-do-head-and-tail-on-null-delimited-input-in-bash
  files=()
  while read -r -d $'\0'; do
    files+=("$REPLY")
  done < <(
    find . -iname "*$query*" -maxdepth "$maxdepth" -print0 2>/dev/null \
      | tr '\0\n' '\n\0' | head -n 2 | tr '\0\n' '\n\0'
  ) || exit 1

  # If found single match, open file.
  if [[ ${#files[@]} -eq 1 ]]; then
    file=$(realpath "${files[0]}")

    _open_filematch
  fi

  # fuz -e: Search filenames, open with vim
  # Uses ripgrep and fzf exact search.
  # FZF auto-selects if single match
  # Bindings: Ctrl + O to open with vim, Ctrl + L to open with less
  if [[ $names == 1 ]]; then
    file=$(
      rg "^" --max-columns 250 --max-columns-preview --files-with-matches \
        --max-depth "$maxdepth" --max-filesize "$maxsize" \
        ${rg_sort:-} \
        2>/dev/null \
        | fzf "$fuzzysearch" --select-1 --query "${query-}" \
          ${fzf_sort:-} \
          --header 'Press CTRL+O to edit, CTRL+L to view, CTRL+J/K down/up' \
          --bind "ctrl-o:execute(source $FUZ_SCRIPTS_FILE && _fze_write "{}" < /dev/tty > /dev/tty)" \
          --bind "ctrl-l:execute(source $FUZ_SCRIPTS_FILE && _fze_read "{}" < /dev/tty > /dev/tty)" \
          --preview="bat --color=always {}"
    ) || if [[ $? -eq 130 ]]; then exit 1; fi # Exit if Ctrl + C (FZF error code 130)
    file="$dir/$file"

    # Open with vim or less
    _open_filematch

  # fuz: Search file-contents, open with less
  # Uses ripgrep with line numbers + filenames. Ignores binary files and .git
  # FZF shows file-content previews. Auto-selects if single match
  # Hack: $fuzzysearch unquoted to allow for empty string (fzf breaks with "" as input)
  # Bindings: Ctrl + O to open with vim, Ctrl + L to open with less
  else
    filematch=$(
      rg ".*[:alpha:]" --max-columns 250 --max-columns-preview \
        --color=always --no-heading --with-filename --line-number \
        --max-depth "$maxdepth" --max-filesize "$maxsize" --max-count "$maxlines" \
        ${rg_sort:-} \
        2>/dev/null \
        | LC_ALL=C sed "s;$dir/;;" \
        | fzf "${fuzzysearch}" --select-1 --query "${query-}" \
          ${fzf_sort:-} \
          --header 'Press CTRL+O to edit, CTRL+L to view, CTRL+J/K for down/up' \
          --bind "ctrl-o:execute(source $FUZ_SCRIPTS_FILE && _fz_write \"$dir\" "{}" < /dev/tty > /dev/tty)" \
          --bind "ctrl-l:execute(source $FUZ_SCRIPTS_FILE && _fz_read \"$dir\" "{}" < /dev/tty > /dev/tty)" \
          --preview="source $FUZ_SCRIPTS_FILE \
        ; cd \"$dir\"; string2arg \"$dir\"/{}"
    ) || if [[ $? -eq 130 ]]; then exit 1; fi # Exit if Ctrl + C (FZF error code 130)

    # Extract filename and linenumber from match
    file=$(cut -d":" -f1 <<<"$filematch")
    file="$dir/$file"
    linematch=$(cut -d":" -f2 <<<"$filematch")

    # Open with vim or less
    _open_filematch
  fi

  exit 0
}

# Run program
main "$@"
